/**
 * cloning reach router types so the packages does not depends on reach/router types if not used.
 * to be removed in v6 and deprecate reach-router
 */
interface HLocation<S = unknown> {
    pathname: string;
    search: string;
    state: S;
    hash: string;
    key?: string | undefined;
}
declare type WindowLocation<S = unknown> = Window['location'] & HLocation<S>;
declare type HistoryActionType = 'PUSH' | 'POP';
declare type HistoryLocation = WindowLocation & {
    state?: any;
};
interface HistoryListenerParameter {
    location: HistoryLocation;
    action: HistoryActionType;
}
declare type HistoryListener = (parameter: HistoryListenerParameter) => void;
declare type HistoryUnsubscribe = () => void;
interface NavigateOptions<TState> {
    state?: TState | undefined;
    replace?: boolean | undefined;
}
interface NavigateFn {
    (to: string, options?: NavigateOptions<{}>): Promise<void>;
    (to: number): Promise<void>;
}
export interface ReachHistory {
    readonly location: HistoryLocation;
    readonly transitioning: boolean;
    listen: (listener: HistoryListener) => HistoryUnsubscribe;
    navigate: NavigateFn;
}
export {};
