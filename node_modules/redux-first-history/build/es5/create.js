"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReduxHistoryContext = void 0;
var actions_1 = require("./actions");
var middleware_1 = require("./middleware");
var reducer_1 = require("./reducer");
var createReduxHistoryContext = function (_a) {
    var history = _a.history, _b = _a.routerReducerKey, routerReducerKey = _b === void 0 ? 'router' : _b, _c = _a.reduxTravelling, reduxTravelling = _c === void 0 ? false : _c, _d = _a.showHistoryAction, showHistoryAction = _d === void 0 ? false : _d, selectRouterState = _a.selectRouterState, _e = _a.savePreviousLocations, savePreviousLocations = _e === void 0 ? 0 : _e, batch = _a.batch, reachGlobalHistory = _a.reachGlobalHistory;
    var listenObject = false;
    // @ts-ignore
    var callListener = function (listener, location, action) {
        return listenObject ? listener({ location: location, action: action }) : listener(location, action);
    };
    if (typeof batch !== 'function') {
        batch = function (fn) {
            fn();
        };
    }
    /** ********************************************  REDUX REDUCER ***************************************************** */
    if (typeof selectRouterState !== 'function') {
        selectRouterState = function (state) { return state[routerReducerKey]; };
    }
    var routerReducer = (0, reducer_1.createRouterReducer)({ savePreviousLocations: savePreviousLocations });
    var routerMiddleware = (0, middleware_1.createRouterMiddleware)({ history: history, showHistoryAction: showHistoryAction });
    /** ******************************************  REDUX TRAVELLING  ************************************************** */
    var isReduxTravelling = false;
    var handleReduxTravelling = function (store) {
        var locationEqual = function (loc1, loc2) {
            return loc1.pathname === loc2.pathname && loc1.search === loc2.search && loc1.hash === loc2.hash;
        };
        return store.subscribe(function () {
            // @ts-ignore
            var sLoc = selectRouterState(store.getState()).location;
            var hLoc = history.location;
            if (sLoc && hLoc && !locationEqual(sLoc, hLoc)) {
                isReduxTravelling = true;
                history.push({ pathname: sLoc.pathname, search: sLoc.search, hash: sLoc.hash });
            }
        });
    };
    /** ******************************************  REDUX FIRST HISTORY   *********************************************** */
    var createReduxHistory = function (store) {
        var registeredCallback = [];
        // init location store
        store.dispatch((0, actions_1.locationChangeAction)(history.location, history.action));
        if (reduxTravelling) {
            handleReduxTravelling(store);
        }
        // listen to history API
        // @ts-ignore
        history.listen(function (location, action) {
            // support history v5
            // @ts-ignore
            if (location.location) {
                // @ts-ignore
                action = location.action;
                // @ts-ignore
                location = location.location;
                listenObject = true;
            }
            if (isReduxTravelling) {
                isReduxTravelling = false;
                // notify registered callback travelling
                // @ts-ignore
                var routerState_1 = selectRouterState(store.getState());
                registeredCallback.forEach(function (c) {
                    return callListener(c, routerState_1.location, routerState_1.action);
                });
                return;
            }
            // @ts-ignore
            batch(function () {
                store.dispatch((0, actions_1.locationChangeAction)(location, action));
                // @ts-ignore
                var routerState = selectRouterState(store.getState());
                registeredCallback.forEach(function (c) {
                    return callListener(c, routerState.location, routerState.action);
                });
            });
        });
        // listen to reach globalHistory (support "navigate")
        if (reachGlobalHistory) {
            reachGlobalHistory.listen(function (_a) {
                var location = _a.location, action = _a.action;
                if (action !== "POP") {
                    var loc_1 = {
                        pathname: location.pathname,
                        search: location.search,
                        hash: location.hash,
                        key: location.key,
                        state: location.state,
                    };
                    // @ts-ignore
                    batch(function () {
                        // @ts-ignore
                        store.dispatch((0, actions_1.locationChangeAction)(loc_1, action));
                        // @ts-ignore
                        var routerState = selectRouterState(store.getState());
                        registeredCallback.forEach(function (c) {
                            return callListener(c, routerState.location, routerState.action);
                        });
                    });
                }
            });
        }
        // @ts-ignore
        return {
            block: history.block,
            createHref: history.createHref,
            push: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return store.dispatch(actions_1.push.apply(void 0, args));
            },
            replace: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return store.dispatch(actions_1.replace.apply(void 0, args));
            },
            go: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return store.dispatch(actions_1.go.apply(void 0, args));
            },
            // @ts-ignore
            goBack: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return store.dispatch(actions_1.goBack.apply(void 0, args));
            },
            // @ts-ignore
            goForward: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                // @ts-ignore
                return store.dispatch(actions_1.goForward.apply(void 0, args));
            },
            // @ts-ignore
            back: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return store.dispatch(actions_1.back.apply(void 0, args));
            },
            // @ts-ignore
            forward: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return store.dispatch(actions_1.forward.apply(void 0, args));
            },
            listen: function (callback) {
                if (registeredCallback.indexOf(callback) < 0) {
                    registeredCallback.push(callback);
                }
                return function () {
                    registeredCallback = registeredCallback.filter(function (c) { return c !== callback; });
                };
            },
            // @ts-ignore
            get location() {
                // @ts-ignore
                return selectRouterState(store.getState()).location;
            },
            // @ts-ignore
            get action() {
                // @ts-ignore
                return selectRouterState(store.getState()).action;
            },
            get length() {
                // @ts-ignore
                return history.length;
            },
            // @ts-ignore
            get listenObject() {
                return listenObject;
            },
        };
    };
    return { routerReducer: routerReducer, routerMiddleware: routerMiddleware, createReduxHistory: createReduxHistory };
};
exports.createReduxHistoryContext = createReduxHistoryContext;
//# sourceMappingURL=create.js.map